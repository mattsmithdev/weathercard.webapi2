// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace WeatherCardApi.Specs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class WeatherUndergroundFeature : Xunit.IClassFixture<WeatherUndergroundFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "WeatherUnderground.feature"
#line hidden
        
        public WeatherUndergroundFeature()
        {
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "WeatherUnderground", "\tIn order to lookup the weather from WeatherUnderground\r\n\tAs a site user\r\n\tI want" +
                    " to be told the locations and the weather", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void SetFixture(WeatherUndergroundFeature.FixtureData fixtureData)
        {
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute(DisplayName="Get Weather from WeatherUnderground")]
        [Xunit.TraitAttribute("FeatureTitle", "WeatherUnderground")]
        [Xunit.TraitAttribute("Description", "Get Weather from WeatherUnderground")]
        [Xunit.TraitAttribute("Category", "WeatherUnderground")]
        [Xunit.TraitAttribute("Category", "weather")]
        public virtual void GetWeatherFromWeatherUnderground()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get Weather from WeatherUnderground", new string[] {
                        "WeatherUnderground",
                        "weather"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("I am in the city of San Francisco", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
 testRunner.And("I am in the state of CA", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 10
 testRunner.And("I am in the country of US", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 11
 testRunner.And("I selected WeatherUnderground as my weather provider", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 12
 testRunner.When("I get the forecast for the next 7 days", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 13
 testRunner.Then("The result should contain the current temperature", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Get Location by IP from WeatherUnderground")]
        [Xunit.TraitAttribute("FeatureTitle", "WeatherUnderground")]
        [Xunit.TraitAttribute("Description", "Get Location by IP from WeatherUnderground")]
        [Xunit.TraitAttribute("Category", "WeatherUnderground")]
        public virtual void GetLocationByIPFromWeatherUnderground()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get Location by IP from WeatherUnderground", new string[] {
                        "WeatherUnderground"});
#line 16
this.ScenarioSetup(scenarioInfo);
#line 17
 testRunner.Given("I have an IP address of 74.103.166.10", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 18
 testRunner.Then("The location should return a city of Kennett Square", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Get List of Locations from WeatherUndeground")]
        [Xunit.TraitAttribute("FeatureTitle", "WeatherUnderground")]
        [Xunit.TraitAttribute("Description", "Get List of Locations from WeatherUndeground")]
        [Xunit.TraitAttribute("Category", "WeatherUnderground")]
        public virtual void GetListOfLocationsFromWeatherUndeground()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get List of Locations from WeatherUndeground", new string[] {
                        "WeatherUnderground"});
#line 21
this.ScenarioSetup(scenarioInfo);
#line 22
 testRunner.Given("I search for San Fran", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 23
 testRunner.Then("The results should contain the city of San Francisco", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                WeatherUndergroundFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                WeatherUndergroundFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
